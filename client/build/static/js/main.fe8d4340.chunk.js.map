{"version":3,"sources":["utils/API.js","components/modal/Modal.js","pages/hotspots.js","pages/home.js","pages/profile.js","pages/recent.js","App.js","registerServiceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","Modal","require","state","selectedFile","fileUpload","e","googleId","localStorage","getItem","files","Array","from","target","formData","FormData","append","fetch","method","body","then","res","ok","json","react_default","a","createElement","Fragment","className","style","display","type","id","onChange","this","Component","HotSpots","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","users","_this2","Axios","get","setState","data","map","user","i","key","src","url","alt","imageUrl","home","hotspots","profile","width","recent","textAlign","minHeight","name","href","_id","App","responseGoogle","console","log","setItem","loggedIn","logout","clear","react_router_dom","to","modal_Modal","onClick","google_login_default","clientId","process","buttonText","onSuccess","onFailure","react_router","path","component","Home","Profile","Recent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","concat","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fe8d4340.chunk.js","sourcesContent":["import axios from 'axios';\n\n// call to front end \n// Make API calls to be exported throughout","import React, { Component } from \"react\";\nimport GoogleLogin from 'react-google-login';\nimport \"./style.css\";\nimport axios from \"axios\";\nconst db = require(\"../../utils/API\")\n\nclass Modal extends Component {\n  state = {\n    selectedFile: null\n  };\n\n  fileUpload = e => {\n   \n    const googleId = localStorage.getItem('id');\n    const files = Array.from(e.target.files);\n\n    const formData = new FormData();\n    formData.append(0,files[0]);\n    formData.append(\"googleId\",googleId);\n\n     \n    fetch(`http://localhost:3001/image-upload-single`, {\n      method: \"POST\",\n      body:formData\n    }).then(res => {\n        // console.log(res.json());\n      if (!res.ok) {\n        throw res;\n      }\n      return res.json()\n    })\n      \n\n        //db code \n        //add img url to db\n        //img url will be a property on res parameter  \n        \n    \n  }\n  render() {\n    return (\n      \n      <React.Fragment>\n        <form>\n          <div className=\"form-group\" style={{display:\"inline-block\"}} >\n        \n            <input \n              type=\"file\"\n              className=\"form-control-file\"\n              id=\"exampleFormControlFile1\"\n              onChange={this.fileUpload}\n            />  \n          </div>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport users from '../pseudoUsers.json';\nimport Axios from 'axios';\n\nclass HotSpots extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {users: []};\n      }\n\n    componentDidMount() {\n        Axios.get(\"/api/user\").then(res => {\n            this.setState({\n                users: res.data\n            });\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n            <div className =\"row\">\n            { this.state.users.map((user,i )=> (\n      \n      <div key={i} className=\"card\">\n                <img className=\"card-img-top\" src={user.url} alt=\"Card image cap\"/>\n                <div className=\"card-body\">\n                <h5 className=\"card-title\">Card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                <img className=\"user-img\" src={user.imageUrl} alt=\"userUpload\"/>\n            </div>\n        </div>\n       \n            ))}\n</div>\n            </div>\n        );\n    }\n}\n\nexport default HotSpots;","import React, {Component} from \"react\";\n\nimport Modal from \"../components/modal/Modal\"\nimport HotSpots from \"../pages/hotspots\";\n\n\n\n\nclass home extends Component {\n    render() {\n        return (\n            <div>\n            <HotSpots/>\n            </div>\n        );\n    }\n}\n\nexport default home;\n\n","import React, { Component } from 'react';\n// import Profile from \"../components/profilePic/profile\"\nimport Modal from \"../components/modal/Modal\"\nimport Axios from \"axios\"\nimport { userInfo } from 'os';\n\nclass profile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {users: []};\n      }\n\n      componentDidMount() {\n        Axios.get(\"/api/user/:id\").then(res => {\n            this.setState({\n                users: res.data\n            });\n        })\n    }\n    render() {\n        return (\n        <div>\n            { this.state.users.map((user,i )=> (\n            <div key= {i} className=\"card\" style={{width:\"18rem\"}}>\n                <img src={user.imageUrl} className=\"card-img-top\" alt=\"...\"/>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                </div>\n            </div>\n            ))}\n        </div>\n\n         );\n    }\n }\n        \nexport default profile;","import React, { Component } from 'react';\nimport users from '../pseudoUsers.json';\nimport Axios from 'axios';\n\nclass recent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {users: []};\n      }\n\n    componentDidMount() {\n        Axios.get(\"/api/user\").then(res => {\n            this.setState({\n                users: res.data\n            });\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n            <div className =\"row\">\n            { this.state.users.map((user,i )=> (\n      <div key={i} className=\"card text-center\" style={{width: \"70rem\", textAlign:\"center\", minHeight:\"400px\"}}>\n        <div className=\"card-body\">\n        <div className=\"row\">\n            <div className= \"col-sm-4\">\n                <h5 className=\"card-title\">{user.name}</h5>\n                <img src={user.imageUrl} className=\"card-img-top\" alt=\"...\"/>\n                <br/>\n                <a href={user._id} className=\"btn btn-primary\">profile</a>\n            </div>\n            <div className= \"col-sm-8\">\n                <img src={user.url} />\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n            </div>\n        </div>\n    </div>\n  </div>\n            ))}\n</div>\n            </div>\n        );\n    }\n}\n\nexport default recent;","import React, { Component } from \"react\";\nimport GoogleLogin from 'react-google-login';\nimport ReactDOM from 'react-dom';\nimport \"../src/style.css\";\nimport { BrowserRouter as Router, Route, Link, } from \"react-router-dom\";\n// import Footer from \"./components/footer/Footer\"\nimport \"./components/footer/style.css\"\n// import Navbar from \"./components/Navbar/Navbar\"\nimport Home from \"./pages/home.js\";\nimport Profile from \"./pages/profile\";\nimport HotSpots from \"./pages/hotspots\";\nimport Recent from \"./pages/recent\";\n// import Login from \"./pages/login\";\nimport \"./style.css\";\nimport \"./components/Navbar/style.css\";\nimport Modal from \"./components/modal/Modal\";\n\n\n// import Nomatch from \"./pages/Nomatch\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props) \n    console.log(this.props)\n    const id = localStorage.getItem('id');\n    this.state= {\n      loggedIn: id ? true : false\n    }\n  }\n  componentDidMount() {\n//     // api calls here\n//     // set response to state\n  }\n  responseGoogle = (res) => {\n    console.log(res) //Axios call to backend \n    localStorage.setItem('id', res.googleId);\n    this.setState({\n      loggedIn: true\n    })\n  }\n  logout = () => {\n    localStorage.clear();\n    this.setState({\n      loggedIn: false\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"Navbar-nav\">\n            <div className=\"navi\">\n            <a className=\"navbar-brand\" href=\"/home\">Check-N-Go</a>\n              {this.state.loggedIn\n              ?<div style={{ display:\"inline-block\" }}>\n              <Link to=\"/\">Home</Link>\n              <Link to=\"/Profile\">Profile</Link>\n              <Link to=\"/HotSpots\">HotSpots</Link>\n              <Link to=\"/Recent\">Recent</Link>\n              <Modal/>\n              </div>\n              : \"\"\n              }\n              {\n              this.state.loggedIn\n              ? <button  onClick={this.logout}>Logout</button>\n              :<GoogleLogin\n                clientId={process.env.REACT_APP_GOOGLE_API_KEY}\n                buttonText=\"Login with Google\"\n                onSuccess={this.responseGoogle}\n                onFailure={this.responseGoogle}\n                \n                /> \n            } \n\n            </div>\n            \n            \n          </header>\n          \n          \n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/Profile\" component={Profile} />\n          <Route path=\"/HotSpots\" component={HotSpots} />\n          <Route path=\"/Recent\" component={Recent} />\n        </div>\n      </Router>\n      \n    );\n  }\n};\n\nexport default App;\n\n\n\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}